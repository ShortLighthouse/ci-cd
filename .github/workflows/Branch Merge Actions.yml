name: CICD Branch Merge Actions

on:
  pull_request:
    types:
      - closed

env:
  # Put here the ID of the integration flow that will be uploaded to the repository
  INTEGRATION_FLOW_ID: Query_Public_GitHub_Repositories
  VERSION: ""
  BRANCH_SHA: ""
  BRANCH_NAME: ""
  # This is the URL of the SAP CPI runtime
  CPI_ENDPOINT_URL: ${{ secrets.CPI_ENDPOINT_URL }}
  # This is the ClientID and Client Secret that is used to access the CPI HTTPS Endpoints
  # It is in the form of ClientID:Client Secret, and is then Base64 encoded.
  CLIENT_ID_SECRET_BASE_64: ${{ secrets.CLIENT_ID_SECRET_BASE_64 }}
  CI_COMMIT_MESSAGE: Add Integration Flow Build Artifacts
  CI_COMMIT_AUTHOR: Continuous Integration
  CI_COMMIT_EMAIL: donotreply@thevoid.com 

jobs:
  push-integration-flow-to-cpi:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Get version of Integration Flow deployed
        id: integration_flow_version
        run: |
         URL_RESPONSE=$(curl --ssl-no-revoke -X GET \
          ${CPI_ENDPOINT_URL}/http/IntegrationRuntimeArtifacts/LatestVersion -H "Authorization: Basic ${{ env.CLIENT_ID_SECRET_BASE_64 }}" \
          -H "id: $INTEGRATION_FLOW_ID") >> $GITHUB_ENV

          VERSION=$(jq '.entry.properties.Version' <(echo "${URL_RESPONSE}"))

          echo "version=${VERSION}" >> $GITHUB_ENV

      - name: Show Version Retrieved
        run: 'echo "Version: ${{ env.version }}"'

        # Only a single commit is fetched by default, for the ref/SHA that triggered the workflow.
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display Branch
        run: |
          BRANCH_SHA=$(git rev-parse HEAD)
          echo "Branch SHA: ${BRANCH_SHA}"
          BRANCH_NAME=$(git branch --show-current)
          echo "Branch name: ${BRANCH_NAME}"

        # Update metainfo.prop with description containing Branch SHA and Branch name.

        # Create zip file from files and folders.
      - name: Zip the Files and Folders in the Repository
        run: 7z a integration_flow.zip ./*

      - name: List files
        run: ls -l

        # Base64 encode zip file.
      - name: Base64 Encode Zip File
        id: base64Config
        uses: frostebite/File-To-Base64@master
        with:
          filePath: integration_flow.zip

      - name: Display Base64 Encoded String
        run: 'echo "Base64 Encoded Zip file: ${{ steps.base64Config.outputs.base64 }}"'

        # Call Integration REST API to get a CSRF token
      - name: Get CSRF Token
        id: get_csrf_token
        run: |  
             CSRF_TOKEN=$(curl -I --ssl-no-revoke -X GET \
               ${CPI_ENDPOINT_URL}/http/GetCSRFToken -H "Authorization: Basic ${{ env.CLIENT_ID_SECRET_BASE_64 }}" | grep -Po 'x-csrf-token: \K[^"]*') >> $GITHUB_ENV     
             
             echo "csrf_token=${CSRF_TOKEN}" >>  $GITHUB_ENV

             echo "CSRF_TOKEN: ${CSRF_TOKEN}"

      - name: Show CSRF token retrieved in env context
        run:  'echo "csrf_token: ${{ env.csrf_token }}"'          

        # Call Integration REST API to update integration flow.
      - name: Push Integration Flow back to CPI
        id: push_back_to_cpi
        run: |
            JSON_STRING=$( jq -n \
            --arg ac ${{ steps.base64Config.outputs.base64 }} \
            '{ArtifactContent: $ac}' )

            echo "JSON_STRING: ${JSON_STRING}"

            URL_UPDATE_RESPONSE=$(curl --ssl-no-revoke -X PUT \
              ${CPI_ENDPOINT_URL}/http/IntegrationRuntimeArtifacts/UpdateIntegrationFlow \
              -H "Authorization: Basic ${{ env.CLIENT_ID_SECRET_BASE_64 }}" \
              -H "id: $INTEGRATION_FLOW_ID" \
              -H "X-CSRF-Token: ${{ env.csrf_token }}")
              -d "${JSON_STRING}")


          








   

          